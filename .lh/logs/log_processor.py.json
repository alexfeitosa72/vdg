{
    "sourceFile": "logs/log_processor.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1747365951566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747367082554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import pandas as pd\r\n from pathlib import Path\r\n from typing import Dict, Tuple\r\n from dataclasses import dataclass\r\n+import os\r\n \r\n @dataclass\r\n class Paths:\r\n     \"\"\"Centraliza todos os caminhos de arquivo\"\"\"\r\n@@ -16,8 +17,13 @@\n \r\n def consolidate_logs(paths: Paths) -> pd.DataFrame:\r\n     \"\"\"Consolida todos os arquivos de log em um único DataFrame\"\"\"\r\n     bloco_files = list(paths.base_dir.glob('bloco_*_concatenado.csv'))\r\n+    if not bloco_files:\r\n+        raise FileNotFoundError(\r\n+            f\"Nenhum arquivo 'bloco_*_concatenado.csv' encontrado em {paths.base_dir}. \"\r\n+            \"Verifique se os arquivos de entrada estão no diretório correto.\"\r\n+        )\r\n     dfs = [pd.read_csv(file, sep='\\t') for file in bloco_files]\r\n     return pd.concat(dfs, ignore_index=True)\r\n \r\n def split_by_gender(df: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:\r\n@@ -84,29 +90,40 @@\n def main():\r\n     \"\"\"Função principal que executa todo o pipeline\"\"\"\r\n     paths = Paths()\r\n     \r\n-    # Consolidação\r\n-    df_consolidated = consolidate_logs(paths)\r\n-    df_consolidated.to_csv(paths.consolidated, sep='\\t', index=False)\r\n-    print(f\"Arquivo consolidado criado com {len(df_consolidated)} registros\")\r\n+    # Cria o diretório base se não existir\r\n+    if not paths.base_dir.exists():\r\n+        print(f\"Criando diretório {paths.base_dir}\")\r\n+        paths.base_dir.mkdir(parents=True, exist_ok=True)\r\n     \r\n-    # Separação por gênero\r\n-    df_male, df_female = split_by_gender(df_consolidated)\r\n-    df_male.to_csv(paths.male, sep='\\t', index=False)\r\n-    df_female.to_csv(paths.female, sep='\\t', index=False)\r\n-    print(f\"Registros masculinos: {len(df_male)}\")\r\n-    print(f\"Registros femininos: {len(df_female)}\")\r\n-    \r\n-    # Agregação\r\n-    male_agg = aggregate_data(df_male)\r\n-    female_agg = aggregate_data(df_female)\r\n-    male_agg.to_csv(paths.male_agg, sep='\\t', index=False)\r\n-    female_agg.to_csv(paths.female_agg, sep='\\t', index=False)\r\n-    \r\n-    # Análise de empates\r\n-    empates_df = find_ties(male_agg, female_agg)\r\n-    empates_df.to_csv(paths.ties, sep='\\t', index=False)\r\n-    print(f\"Total de frases com empate: {len(empates_df)}\")\r\n+    try:\r\n+        # Consolidação\r\n+        df_consolidated = consolidate_logs(paths)\r\n+        df_consolidated.to_csv(paths.consolidated, sep='\\t', index=False)\r\n+        print(f\"Arquivo consolidado criado com {len(df_consolidated)} registros\")\r\n+        \r\n+        # Separação por gênero\r\n+        df_male, df_female = split_by_gender(df_consolidated)\r\n+        df_male.to_csv(paths.male, sep='\\t', index=False)\r\n+        df_female.to_csv(paths.female, sep='\\t', index=False)\r\n+        print(f\"Registros masculinos: {len(df_male)}\")\r\n+        print(f\"Registros femininos: {len(df_female)}\")\r\n+        \r\n+        # Agregação\r\n+        male_agg = aggregate_data(df_male)\r\n+        female_agg = aggregate_data(df_female)\r\n+        male_agg.to_csv(paths.male_agg, sep='\\t', index=False)\r\n+        female_agg.to_csv(paths.female_agg, sep='\\t', index=False)\r\n+        \r\n+        # Análise de empates\r\n+        empates_df = find_ties(male_agg, female_agg)\r\n+        empates_df.to_csv(paths.ties, sep='\\t', index=False)\r\n+        print(f\"Total de frases com empate: {len(empates_df)}\")\r\n+        \r\n+    except FileNotFoundError as e:\r\n+        print(f\"Erro: {e}\")\r\n+    except Exception as e:\r\n+        print(f\"Erro inesperado: {e}\")\r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747367268491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import pandas as pd\r\n from pathlib import Path\r\n from typing import Dict, Tuple\r\n from dataclasses import dataclass\r\n-import os\r\n \r\n @dataclass\r\n class Paths:\r\n     \"\"\"Centraliza todos os caminhos de arquivo\"\"\"\r\n@@ -17,13 +16,8 @@\n \r\n def consolidate_logs(paths: Paths) -> pd.DataFrame:\r\n     \"\"\"Consolida todos os arquivos de log em um único DataFrame\"\"\"\r\n     bloco_files = list(paths.base_dir.glob('bloco_*_concatenado.csv'))\r\n-    if not bloco_files:\r\n-        raise FileNotFoundError(\r\n-            f\"Nenhum arquivo 'bloco_*_concatenado.csv' encontrado em {paths.base_dir}. \"\r\n-            \"Verifique se os arquivos de entrada estão no diretório correto.\"\r\n-        )\r\n     dfs = [pd.read_csv(file, sep='\\t') for file in bloco_files]\r\n     return pd.concat(dfs, ignore_index=True)\r\n \r\n def split_by_gender(df: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:\r\n@@ -90,40 +84,29 @@\n def main():\r\n     \"\"\"Função principal que executa todo o pipeline\"\"\"\r\n     paths = Paths()\r\n     \r\n-    # Cria o diretório base se não existir\r\n-    if not paths.base_dir.exists():\r\n-        print(f\"Criando diretório {paths.base_dir}\")\r\n-        paths.base_dir.mkdir(parents=True, exist_ok=True)\r\n+    # Consolidação\r\n+    df_consolidated = consolidate_logs(paths)\r\n+    df_consolidated.to_csv(paths.consolidated, sep='\\t', index=False)\r\n+    print(f\"Arquivo consolidado criado com {len(df_consolidated)} registros\")\r\n     \r\n-    try:\r\n-        # Consolidação\r\n-        df_consolidated = consolidate_logs(paths)\r\n-        df_consolidated.to_csv(paths.consolidated, sep='\\t', index=False)\r\n-        print(f\"Arquivo consolidado criado com {len(df_consolidated)} registros\")\r\n-        \r\n-        # Separação por gênero\r\n-        df_male, df_female = split_by_gender(df_consolidated)\r\n-        df_male.to_csv(paths.male, sep='\\t', index=False)\r\n-        df_female.to_csv(paths.female, sep='\\t', index=False)\r\n-        print(f\"Registros masculinos: {len(df_male)}\")\r\n-        print(f\"Registros femininos: {len(df_female)}\")\r\n-        \r\n-        # Agregação\r\n-        male_agg = aggregate_data(df_male)\r\n-        female_agg = aggregate_data(df_female)\r\n-        male_agg.to_csv(paths.male_agg, sep='\\t', index=False)\r\n-        female_agg.to_csv(paths.female_agg, sep='\\t', index=False)\r\n-        \r\n-        # Análise de empates\r\n-        empates_df = find_ties(male_agg, female_agg)\r\n-        empates_df.to_csv(paths.ties, sep='\\t', index=False)\r\n-        print(f\"Total de frases com empate: {len(empates_df)}\")\r\n-        \r\n-    except FileNotFoundError as e:\r\n-        print(f\"Erro: {e}\")\r\n-    except Exception as e:\r\n-        print(f\"Erro inesperado: {e}\")\r\n+    # Separação por gênero\r\n+    df_male, df_female = split_by_gender(df_consolidated)\r\n+    df_male.to_csv(paths.male, sep='\\t', index=False)\r\n+    df_female.to_csv(paths.female, sep='\\t', index=False)\r\n+    print(f\"Registros masculinos: {len(df_male)}\")\r\n+    print(f\"Registros femininos: {len(df_female)}\")\r\n+    \r\n+    # Agregação\r\n+    male_agg = aggregate_data(df_male)\r\n+    female_agg = aggregate_data(df_female)\r\n+    male_agg.to_csv(paths.male_agg, sep='\\t', index=False)\r\n+    female_agg.to_csv(paths.female_agg, sep='\\t', index=False)\r\n+    \r\n+    # Análise de empates\r\n+    empates_df = find_ties(male_agg, female_agg)\r\n+    empates_df.to_csv(paths.ties, sep='\\t', index=False)\r\n+    print(f\"Total de frases com empate: {len(empates_df)}\")\r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747367278453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,34 @@\n import pandas as pd\r\n from pathlib import Path\r\n from typing import Dict, Tuple\r\n from dataclasses import dataclass\r\n+import os\r\n \r\n @dataclass\r\n class Paths:\r\n     \"\"\"Centraliza todos os caminhos de arquivo\"\"\"\r\n-    base_dir: Path = Path('logs_em_tratamento')\r\n-    consolidated: Path = base_dir / 'logs_totais_tratados.csv'\r\n+    base_dir: Path = Path('dados')\r\n+    consolidated: Path = base_dir / 'MQD_1465_log_processado.csv'\r\n     male: Path = base_dir / 'logs_masculino.csv'\r\n     female: Path = base_dir / 'logs_feminino.csv'\r\n     male_agg: Path = base_dir / 'logs_masculino_agregado.csv'\r\n     female_agg: Path = base_dir / 'logs_feminino_agregado.csv'\r\n     ties: Path = base_dir / 'empates_duplos.csv'\r\n \r\n def consolidate_logs(paths: Paths) -> pd.DataFrame:\r\n     \"\"\"Consolida todos os arquivos de log em um único DataFrame\"\"\"\r\n-    bloco_files = list(paths.base_dir.glob('bloco_*_concatenado.csv'))\r\n+    # Tenta ler diretamente o arquivo consolidado se existir\r\n+    if paths.consolidated.exists():\r\n+        return pd.read_csv(paths.consolidated, sep='\\t')\r\n+    \r\n+    # Se não existir, procura por arquivos de bloco\r\n+    bloco_files = list(paths.base_dir.glob('MQD_*.csv'))\r\n+    if not bloco_files:\r\n+        raise FileNotFoundError(\r\n+            f\"Nenhum arquivo de log encontrado em {paths.base_dir}. \"\r\n+            \"Verifique se os arquivos de entrada estão no diretório correto.\"\r\n+        )\r\n     dfs = [pd.read_csv(file, sep='\\t') for file in bloco_files]\r\n     return pd.concat(dfs, ignore_index=True)\r\n \r\n def split_by_gender(df: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:\r\n@@ -84,29 +95,40 @@\n def main():\r\n     \"\"\"Função principal que executa todo o pipeline\"\"\"\r\n     paths = Paths()\r\n     \r\n-    # Consolidação\r\n-    df_consolidated = consolidate_logs(paths)\r\n-    df_consolidated.to_csv(paths.consolidated, sep='\\t', index=False)\r\n-    print(f\"Arquivo consolidado criado com {len(df_consolidated)} registros\")\r\n+    # Cria o diretório base se não existir\r\n+    if not paths.base_dir.exists():\r\n+        print(f\"Criando diretório {paths.base_dir}\")\r\n+        paths.base_dir.mkdir(parents=True, exist_ok=True)\r\n     \r\n-    # Separação por gênero\r\n-    df_male, df_female = split_by_gender(df_consolidated)\r\n-    df_male.to_csv(paths.male, sep='\\t', index=False)\r\n-    df_female.to_csv(paths.female, sep='\\t', index=False)\r\n-    print(f\"Registros masculinos: {len(df_male)}\")\r\n-    print(f\"Registros femininos: {len(df_female)}\")\r\n-    \r\n-    # Agregação\r\n-    male_agg = aggregate_data(df_male)\r\n-    female_agg = aggregate_data(df_female)\r\n-    male_agg.to_csv(paths.male_agg, sep='\\t', index=False)\r\n-    female_agg.to_csv(paths.female_agg, sep='\\t', index=False)\r\n-    \r\n-    # Análise de empates\r\n-    empates_df = find_ties(male_agg, female_agg)\r\n-    empates_df.to_csv(paths.ties, sep='\\t', index=False)\r\n-    print(f\"Total de frases com empate: {len(empates_df)}\")\r\n+    try:\r\n+        # Consolidação\r\n+        df_consolidated = consolidate_logs(paths)\r\n+        df_consolidated.to_csv(paths.consolidated, sep='\\t', index=False)\r\n+        print(f\"Arquivo consolidado criado com {len(df_consolidated)} registros\")\r\n+        \r\n+        # Separação por gênero\r\n+        df_male, df_female = split_by_gender(df_consolidated)\r\n+        df_male.to_csv(paths.male, sep='\\t', index=False)\r\n+        df_female.to_csv(paths.female, sep='\\t', index=False)\r\n+        print(f\"Registros masculinos: {len(df_male)}\")\r\n+        print(f\"Registros femininos: {len(df_female)}\")\r\n+        \r\n+        # Agregação\r\n+        male_agg = aggregate_data(df_male)\r\n+        female_agg = aggregate_data(df_female)\r\n+        male_agg.to_csv(paths.male_agg, sep='\\t', index=False)\r\n+        female_agg.to_csv(paths.female_agg, sep='\\t', index=False)\r\n+        \r\n+        # Análise de empates\r\n+        empates_df = find_ties(male_agg, female_agg)\r\n+        empates_df.to_csv(paths.ties, sep='\\t', index=False)\r\n+        print(f\"Total de frases com empate: {len(empates_df)}\")\r\n+        \r\n+    except FileNotFoundError as e:\r\n+        print(f\"Erro: {e}\")\r\n+    except Exception as e:\r\n+        print(f\"Erro inesperado: {e}\")\r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747367362295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,27 +6,26 @@\n \r\n @dataclass\r\n class Paths:\r\n     \"\"\"Centraliza todos os caminhos de arquivo\"\"\"\r\n-    base_dir: Path = Path('dados')\r\n-    consolidated: Path = base_dir / 'MQD_1465_log_processado.csv'\r\n+    base_dir: Path = Path('logs_em_tratamento')  # Relativo à pasta logs/\r\n+    consolidated: Path = base_dir / 'logs_totais_tratados.csv'\r\n     male: Path = base_dir / 'logs_masculino.csv'\r\n     female: Path = base_dir / 'logs_feminino.csv'\r\n     male_agg: Path = base_dir / 'logs_masculino_agregado.csv'\r\n     female_agg: Path = base_dir / 'logs_feminino_agregado.csv'\r\n     ties: Path = base_dir / 'empates_duplos.csv'\r\n \r\n def consolidate_logs(paths: Paths) -> pd.DataFrame:\r\n     \"\"\"Consolida todos os arquivos de log em um único DataFrame\"\"\"\r\n-    # Tenta ler diretamente o arquivo consolidado se existir\r\n-    if paths.consolidated.exists():\r\n-        return pd.read_csv(paths.consolidated, sep='\\t')\r\n+    # Ajusta o caminho para ser relativo ao script\r\n+    script_dir = Path(__file__).parent\r\n+    full_path = script_dir / paths.base_dir\r\n     \r\n-    # Se não existir, procura por arquivos de bloco\r\n-    bloco_files = list(paths.base_dir.glob('MQD_*.csv'))\r\n+    bloco_files = list(full_path.glob('bloco_*_concatenado.csv'))\r\n     if not bloco_files:\r\n         raise FileNotFoundError(\r\n-            f\"Nenhum arquivo de log encontrado em {paths.base_dir}. \"\r\n+            f\"Nenhum arquivo 'bloco_*_concatenado.csv' encontrado em {full_path}. \"\r\n             \"Verifique se os arquivos de entrada estão no diretório correto.\"\r\n         )\r\n     dfs = [pd.read_csv(file, sep='\\t') for file in bloco_files]\r\n     return pd.concat(dfs, ignore_index=True)\r\n@@ -94,36 +93,38 @@\n \r\n def main():\r\n     \"\"\"Função principal que executa todo o pipeline\"\"\"\r\n     paths = Paths()\r\n+    script_dir = Path(__file__).parent\r\n     \r\n     # Cria o diretório base se não existir\r\n-    if not paths.base_dir.exists():\r\n-        print(f\"Criando diretório {paths.base_dir}\")\r\n-        paths.base_dir.mkdir(parents=True, exist_ok=True)\r\n+    full_path = script_dir / paths.base_dir\r\n+    if not full_path.exists():\r\n+        print(f\"Criando diretório {full_path}\")\r\n+        full_path.mkdir(parents=True, exist_ok=True)\r\n     \r\n     try:\r\n         # Consolidação\r\n         df_consolidated = consolidate_logs(paths)\r\n-        df_consolidated.to_csv(paths.consolidated, sep='\\t', index=False)\r\n+        df_consolidated.to_csv(script_dir / paths.consolidated, sep='\\t', index=False)\r\n         print(f\"Arquivo consolidado criado com {len(df_consolidated)} registros\")\r\n         \r\n         # Separação por gênero\r\n         df_male, df_female = split_by_gender(df_consolidated)\r\n-        df_male.to_csv(paths.male, sep='\\t', index=False)\r\n-        df_female.to_csv(paths.female, sep='\\t', index=False)\r\n+        df_male.to_csv(script_dir / paths.male, sep='\\t', index=False)\r\n+        df_female.to_csv(script_dir / paths.female, sep='\\t', index=False)\r\n         print(f\"Registros masculinos: {len(df_male)}\")\r\n         print(f\"Registros femininos: {len(df_female)}\")\r\n         \r\n         # Agregação\r\n         male_agg = aggregate_data(df_male)\r\n         female_agg = aggregate_data(df_female)\r\n-        male_agg.to_csv(paths.male_agg, sep='\\t', index=False)\r\n-        female_agg.to_csv(paths.female_agg, sep='\\t', index=False)\r\n+        male_agg.to_csv(script_dir / paths.male_agg, sep='\\t', index=False)\r\n+        female_agg.to_csv(script_dir / paths.female_agg, sep='\\t', index=False)\r\n         \r\n         # Análise de empates\r\n         empates_df = find_ties(male_agg, female_agg)\r\n-        empates_df.to_csv(paths.ties, sep='\\t', index=False)\r\n+        empates_df.to_csv(script_dir / paths.ties, sep='\\t', index=False)\r\n         print(f\"Total de frases com empate: {len(empates_df)}\")\r\n         \r\n     except FileNotFoundError as e:\r\n         print(f\"Erro: {e}\")\r\n"
                },
                {
                    "date": 1747367821220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,12 @@\n     male: Path = base_dir / 'logs_masculino.csv'\r\n     female: Path = base_dir / 'logs_feminino.csv'\r\n     male_agg: Path = base_dir / 'logs_masculino_agregado.csv'\r\n     female_agg: Path = base_dir / 'logs_feminino_agregado.csv'\r\n+    male_agg_no_ties: Path = base_dir / 'logs_masculino_agregado_sem_empates.csv'\r\n+    female_agg_no_ties: Path = base_dir / 'logs_feminino_agregado_sem_empates.csv'\r\n     ties: Path = base_dir / 'empates_duplos.csv'\r\n+    removed_ties: Path = base_dir / 'frases_removidas_por_empate.csv'\r\n \r\n def consolidate_logs(paths: Paths) -> pd.DataFrame:\r\n     \"\"\"Consolida todos os arquivos de log em um único DataFrame\"\"\"\r\n     # Ajusta o caminho para ser relativo ao script\r\n@@ -90,8 +93,41 @@\n         on='frase', \r\n         suffixes=('_m', '_f')\r\n     )\r\n \r\n+def remove_ties(df: pd.DataFrame) -> pd.DataFrame:\r\n+    \"\"\"Remove as frases que tiveram empate na classificação majoritária\"\"\"\r\n+    return df[df['classificacao_majoritaria'] != 'empate'].copy()\r\n+\r\n+def get_removed_ties(male_agg: pd.DataFrame, female_agg: pd.DataFrame) -> pd.DataFrame:\r\n+    \"\"\"Obtém as frases que foram removidas por terem empate em pelo menos um dos gêneros\"\"\"\r\n+    # Identifica frases com empate em cada gênero\r\n+    male_ties = male_agg[male_agg['classificacao_majoritaria'] == 'empate']['frase']\r\n+    female_ties = female_agg[female_agg['classificacao_majoritaria'] == 'empate']['frase']\r\n+    \r\n+    # Une as frases com empate de ambos os gêneros\r\n+    all_ties = pd.concat([male_ties, female_ties]).unique()\r\n+    \r\n+    # Cria DataFrame com informações detalhadas das frases removidas\r\n+    removed_data = []\r\n+    for frase in all_ties:\r\n+        male_row = male_agg[male_agg['frase'] == frase].iloc[0] if len(male_agg[male_agg['frase'] == frase]) > 0 else None\r\n+        female_row = female_agg[female_agg['frase'] == frase].iloc[0] if len(female_agg[female_agg['frase'] == frase]) > 0 else None\r\n+        \r\n+        removed_data.append({\r\n+            'frase': frase,\r\n+            'empate_masculino': 'Sim' if male_row is not None and male_row['classificacao_majoritaria'] == 'empate' else 'Não',\r\n+            'empate_feminino': 'Sim' if female_row is not None and female_row['classificacao_majoritaria'] == 'empate' else 'Não',\r\n+            'total_positiva_m': male_row['total_positiva'] if male_row is not None else 0,\r\n+            'total_negativa_m': male_row['total_negativa'] if male_row is not None else 0,\r\n+            'total_neutra_m': male_row['total_neutra'] if male_row is not None else 0,\r\n+            'total_positiva_f': female_row['total_positiva'] if female_row is not None else 0,\r\n+            'total_negativa_f': female_row['total_negativa'] if female_row is not None else 0,\r\n+            'total_neutra_f': female_row['total_neutra'] if female_row is not None else 0\r\n+        })\r\n+    \r\n+    return pd.DataFrame(removed_data)\r\n+\r\n def main():\r\n     \"\"\"Função principal que executa todo o pipeline\"\"\"\r\n     paths = Paths()\r\n     script_dir = Path(__file__).parent\r\n@@ -120,13 +156,26 @@\n         female_agg = aggregate_data(df_female)\r\n         male_agg.to_csv(script_dir / paths.male_agg, sep='\\t', index=False)\r\n         female_agg.to_csv(script_dir / paths.female_agg, sep='\\t', index=False)\r\n         \r\n+        # Remove empates e salva novos arquivos\r\n+        male_agg_no_ties = remove_ties(male_agg)\r\n+        female_agg_no_ties = remove_ties(female_agg)\r\n+        male_agg_no_ties.to_csv(script_dir / paths.male_agg_no_ties, sep='\\t', index=False)\r\n+        female_agg_no_ties.to_csv(script_dir / paths.female_agg_no_ties, sep='\\t', index=False)\r\n+        print(f\"Frases sem empate - Masculino: {len(male_agg_no_ties)}\")\r\n+        print(f\"Frases sem empate - Feminino: {len(female_agg_no_ties)}\")\r\n+        \r\n         # Análise de empates\r\n         empates_df = find_ties(male_agg, female_agg)\r\n         empates_df.to_csv(script_dir / paths.ties, sep='\\t', index=False)\r\n-        print(f\"Total de frases com empate: {len(empates_df)}\")\r\n+        print(f\"Total de frases com empate duplo: {len(empates_df)}\")\r\n         \r\n+        # Salva informações sobre frases removidas\r\n+        removed_ties_df = get_removed_ties(male_agg, female_agg)\r\n+        removed_ties_df.to_csv(script_dir / paths.removed_ties, sep='\\t', index=False)\r\n+        print(f\"Total de frases removidas por empate: {len(removed_ties_df)}\")\r\n+        \r\n     except FileNotFoundError as e:\r\n         print(f\"Erro: {e}\")\r\n     except Exception as e:\r\n         print(f\"Erro inesperado: {e}\")\r\n"
                },
                {
                    "date": 1747368549010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,18 @@\n from typing import Dict, Tuple\r\n from dataclasses import dataclass\r\n import os\r\n \r\n+__all__ = [\r\n+    'Paths',\r\n+    'consolidate_logs',\r\n+    'split_by_gender',\r\n+    'aggregate_data',\r\n+    'find_ties',\r\n+    'remove_ties',\r\n+    'get_removed_ties'\r\n+]\r\n+\r\n @dataclass\r\n class Paths:\r\n     \"\"\"Centraliza todos os caminhos de arquivo\"\"\"\r\n     base_dir: Path = Path('logs_em_tratamento')  # Relativo à pasta logs/\r\n"
                }
            ],
            "date": 1747365951566,
            "name": "Commit-0",
            "content": "import pandas as pd\r\nfrom pathlib import Path\r\nfrom typing import Dict, Tuple\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass Paths:\r\n    \"\"\"Centraliza todos os caminhos de arquivo\"\"\"\r\n    base_dir: Path = Path('logs_em_tratamento')\r\n    consolidated: Path = base_dir / 'logs_totais_tratados.csv'\r\n    male: Path = base_dir / 'logs_masculino.csv'\r\n    female: Path = base_dir / 'logs_feminino.csv'\r\n    male_agg: Path = base_dir / 'logs_masculino_agregado.csv'\r\n    female_agg: Path = base_dir / 'logs_feminino_agregado.csv'\r\n    ties: Path = base_dir / 'empates_duplos.csv'\r\n\r\ndef consolidate_logs(paths: Paths) -> pd.DataFrame:\r\n    \"\"\"Consolida todos os arquivos de log em um único DataFrame\"\"\"\r\n    bloco_files = list(paths.base_dir.glob('bloco_*_concatenado.csv'))\r\n    dfs = [pd.read_csv(file, sep='\\t') for file in bloco_files]\r\n    return pd.concat(dfs, ignore_index=True)\r\n\r\ndef split_by_gender(df: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:\r\n    \"\"\"Separa o DataFrame por gênero\"\"\"\r\n    return df[df['GeneroCod'] == 'm'], df[df['GeneroCod'] == 'f']\r\n\r\ndef get_majority_class(group):\r\n    \"\"\"Determina a classificação majoritária\"\"\"\r\n    value_counts = group.value_counts()\r\n    if len(value_counts) > 1 and value_counts.iloc[0] == value_counts.iloc[1]:\r\n        return 'empate'\r\n    return value_counts.index[0]\r\n\r\ndef aggregate_data(df: pd.DataFrame) -> pd.DataFrame:\r\n    \"\"\"Agrega os dados por frase\"\"\"\r\n    def get_totals(group):\r\n        counts = group.value_counts()\r\n        return {\r\n            'classificacao_majoritaria': get_majority_class(group),\r\n            'total_positiva': counts.get('positiva', 0),\r\n            'total_negativa': counts.get('negativa', 0),\r\n            'total_neutra': counts.get('neutra', 0)\r\n        }\r\n\r\n    agg_df = (df.groupby('frase')\r\n              .agg({\r\n                  'Value': get_totals,\r\n                  'duracao': 'mean',\r\n                  'ParticipantMD5': 'count'\r\n              }))\r\n    \r\n    # Expande os resultados da agregação\r\n    value_columns = pd.DataFrame(agg_df['Value'].tolist(), index=agg_df.index)\r\n    agg_df = agg_df.drop('Value', axis=1)\r\n    agg_df = pd.concat([agg_df, value_columns], axis=1)\r\n    \r\n    # Renomeia colunas\r\n    agg_df = agg_df.rename(columns={\r\n        'duracao': 'duracao_media',\r\n        'ParticipantMD5': 'total_classificacoes'\r\n    })\r\n    \r\n    return agg_df.reset_index()\r\n\r\ndef find_ties(male_agg: pd.DataFrame, female_agg: pd.DataFrame) -> pd.DataFrame:\r\n    \"\"\"Encontra frases com empate em ambos os gêneros\"\"\"\r\n    empates = pd.merge(\r\n        male_agg[male_agg['classificacao_majoritaria'] == 'empate'][['frase']],\r\n        female_agg[female_agg['classificacao_majoritaria'] == 'empate'][['frase']],\r\n        on='frase',\r\n        how='inner'\r\n    )\r\n    \r\n    return empates.merge(\r\n        male_agg, \r\n        on='frase', \r\n        suffixes=('', '_m')\r\n    ).merge(\r\n        female_agg, \r\n        on='frase', \r\n        suffixes=('_m', '_f')\r\n    )\r\n\r\ndef main():\r\n    \"\"\"Função principal que executa todo o pipeline\"\"\"\r\n    paths = Paths()\r\n    \r\n    # Consolidação\r\n    df_consolidated = consolidate_logs(paths)\r\n    df_consolidated.to_csv(paths.consolidated, sep='\\t', index=False)\r\n    print(f\"Arquivo consolidado criado com {len(df_consolidated)} registros\")\r\n    \r\n    # Separação por gênero\r\n    df_male, df_female = split_by_gender(df_consolidated)\r\n    df_male.to_csv(paths.male, sep='\\t', index=False)\r\n    df_female.to_csv(paths.female, sep='\\t', index=False)\r\n    print(f\"Registros masculinos: {len(df_male)}\")\r\n    print(f\"Registros femininos: {len(df_female)}\")\r\n    \r\n    # Agregação\r\n    male_agg = aggregate_data(df_male)\r\n    female_agg = aggregate_data(df_female)\r\n    male_agg.to_csv(paths.male_agg, sep='\\t', index=False)\r\n    female_agg.to_csv(paths.female_agg, sep='\\t', index=False)\r\n    \r\n    # Análise de empates\r\n    empates_df = find_ties(male_agg, female_agg)\r\n    empates_df.to_csv(paths.ties, sep='\\t', index=False)\r\n    print(f\"Total de frases com empate: {len(empates_df)}\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()"
        }
    ]
}