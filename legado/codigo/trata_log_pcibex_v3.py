# -*- coding: utf-8 -*-
"""trata_log_pcibex_v3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Am0eGse_CNLfEBXe5h8AOgy6u7hS8S0S
"""

import pandas as pd
from collections import Counter

# === 1. Leitura do CSV original ===
df = pd.read_csv("results_prod.csv", skiprows=19, header=None)
df.columns = [
    "ReceptionTime", "ParticipantMD5", "Controller", "ItemNumber", "InnerElementNumber",
    "Label", "Group", "PennElementType", "PennElementName", "Parameter",
    "Value", "EventTime", "Comments"
]
df = df[~df["ReceptionTime"].astype(str).str.startswith("#")].copy()
df = df[~df["Label"].isin(["TCLE", "instrucoes", "agradecimento"])]
df.reset_index(drop=True, inplace=True)

# === 2. Extração da resposta de gênero ===
genero_data = df[
    (df["Label"] == "genero") &
    (df["PennElementName"] == "selecionaGenero") &
    (df["Parameter"] == "Selected")
][["ParticipantMD5", "Value"]].rename(columns={"Value": "Genero"}).drop_duplicates()

# === 3. Tratamento do bloco de frases ===
selecoes_frases = df[
    (df["Label"] == "frases") &
    (df["Parameter"] == "Selection")
].copy()
selecoes_frases["ItemNumber"] = selecoes_frases["ItemNumber"].astype(int) - 3
selecoes_frases = selecoes_frases[["ParticipantMD5", "ItemNumber", "Value", "EventTime"]]
selecoes_frases.columns = ["ParticipantMD5", "ItemNumber", "Classificacao", "Timestamp"]

# Obter tempos de início e fim
start_trials = df[(df["Label"] == "frases") & (df["Parameter"] == "_Trial_") & (df["Value"] == "Start")]
end_trials = df[(df["Label"] == "frases") & (df["Parameter"] == "_Trial_") & (df["Value"] == "End")]
start_trials = start_trials[["ParticipantMD5", "ItemNumber", "EventTime"]].copy()
end_trials = end_trials[["ParticipantMD5", "ItemNumber", "EventTime"]].copy()
start_trials["ItemNumber"] = start_trials["ItemNumber"].astype(int) - 3
end_trials["ItemNumber"] = end_trials["ItemNumber"].astype(int) - 3
start_trials.rename(columns={"EventTime": "StartTime"}, inplace=True)
end_trials.rename(columns={"EventTime": "EndTime"}, inplace=True)

# Calcular tempo gasto
frases_final = selecoes_frases.merge(start_trials, on=["ParticipantMD5", "ItemNumber"], how="left")
frases_final = frases_final.merge(end_trials, on=["ParticipantMD5", "ItemNumber"], how="left")
frases_final["Tempo_Gasto"] = ((frases_final["EndTime"] - frases_final["StartTime"]) / 1000).round(3)
frases_final = frases_final[["ParticipantMD5", "ItemNumber", "Classificacao", "Tempo_Gasto", "Timestamp"]]

# === 4. Limitar a 4 participantes por gênero ===
genero_data["PID_Reduzido"] = genero_data["ParticipantMD5"].apply(lambda x: x[:4])
genero_data["GeneroCod"] = genero_data["Genero"].str.lower().map(lambda g: "m" if "masculino" in g else "f")
ids_masculinos = genero_data[genero_data["GeneroCod"] == "m"].head(4)["ParticipantMD5"].tolist()
ids_femininos = genero_data[genero_data["GeneroCod"] == "f"].head(4)["ParticipantMD5"].tolist()
ids_selecionados = ids_masculinos + ids_femininos
frases_filtradas = frases_final[frases_final["ParticipantMD5"].isin(ids_selecionados)].copy()

# === 5. Pivotar classificações e tempos ===
def formatar_id(pid):
    genero = genero_data.set_index("ParticipantMD5").loc[pid, "Genero"]
    sufixo = "M" if "masculino" in genero.lower() else "F"
    return f"{sufixo}_{pid[:4]}"

pivot_class = frases_filtradas.pivot_table(index="ItemNumber", columns="ParticipantMD5", values="Classificacao", aggfunc="first")
pivot_time = frases_filtradas.pivot_table(index="ItemNumber", columns="ParticipantMD5", values="Tempo_Gasto", aggfunc="first")
pivot_class.columns = [f"{formatar_id(pid)}_class" for pid in pivot_class.columns]
pivot_time.columns = [f"{formatar_id(pid)}_tempo" for pid in pivot_time.columns]
frases_limitadas = pd.concat([pivot_class, pivot_time], axis=1).reset_index()

# === 6. Calcular classificação majoritária por gênero ===
colunas_masc = sorted([c for c in frases_limitadas.columns if c.startswith("M_") and c.endswith("_class")])
colunas_femi = sorted([c for c in frases_limitadas.columns if c.startswith("F_") and c.endswith("_class")])

def majoritaria(row, colunas):
    respostas = [row[col] for col in colunas if pd.notna(row[col])]
    if respostas:
        return Counter(respostas).most_common(1)[0][0]
    return None

frases_limitadas["Cla_Maj_Masc"] = frases_limitadas.apply(lambda row: majoritaria(row, colunas_masc), axis=1)
frases_limitadas["Cla_Maj_Femi"] = frases_limitadas.apply(lambda row: majoritaria(row, colunas_femi), axis=1)

# === 7. Reorganizar colunas: femininos primeiro ===
col_fem_class = sorted([c for c in frases_limitadas.columns if c.startswith("F_") and c.endswith("_class")])
col_fem_tempo = sorted([c for c in frases_limitadas.columns if c.startswith("F_") and c.endswith("_tempo")])
col_masc_class = sorted([c for c in frases_limitadas.columns if c.startswith("M_") and c.endswith("_class")])
col_masc_tempo = sorted([c for c in frases_limitadas.columns if c.startswith("M_") and c.endswith("_tempo")])

colunas_final = (
    ["ItemNumber", "Cla_Maj_Masc", "Cla_Maj_Femi"] +
    col_fem_class + col_fem_tempo +
    col_masc_class + col_masc_tempo
)

frases_formatadas = frases_limitadas[colunas_final]
# === 8. Exportar ===
frases_formatadas.to_csv("frases_formatadas.csv", index=False)

# prompt: sugira analises para o arquivo de saida

import pandas as pd

# Carregar o arquivo frases_formatadas.csv
frases_formatadas = pd.read_csv("frases_formatadas.csv")

# Análise 1: Frequência da classificação majoritária por gênero
frequencia_classificacao_genero = frases_formatadas.groupby(["Cla_Maj_Masc", "Cla_Maj_Femi"])["ItemNumber"].count()
print("Frequência da Classificação Majoritária por Gênero:\n", frequencia_classificacao_genero)

# Análise 2: Tempo médio gasto por gênero e classificação majoritária
tempo_medio_genero = frases_formatadas.copy()
colunas_tempo = [col for col in tempo_medio_genero.columns if "_tempo" in col]
for coluna in colunas_tempo:
  genero = "Masculino" if coluna.startswith("M_") else "Feminino"
  tempo_medio_genero[coluna] = pd.to_numeric(tempo_medio_genero[coluna], errors='coerce') # Converter para numérico, tratando erros
tempo_medio_genero_pivot = pd.melt(tempo_medio_genero, id_vars=['ItemNumber', 'Cla_Maj_Masc', 'Cla_Maj_Femi'], value_vars=colunas_tempo, var_name='Participante', value_name='Tempo')
tempo_medio_genero_pivot['Genero'] = tempo_medio_genero_pivot['Participante'].apply(lambda x: 'Masculino' if x.startswith('M_') else 'Feminino')
tempo_medio_genero_agrupado = tempo_medio_genero_pivot.groupby(['Genero', 'Cla_Maj_Masc', 'Cla_Maj_Femi'])['Tempo'].mean()
print("\nTempo Médio Gasto por Gênero e Classificação Majoritária:\n", tempo_medio_genero_agrupado)