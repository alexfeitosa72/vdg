# -*- coding: utf-8 -*-
"""XP_Logs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AK7DojVqysbLwe-BGf7tIBm5DFGkMZSo
"""

from IPython import get_ipython
from IPython.display import display
# %%
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind
import numpy as np

# ===== PASSO 1: CARREGAR O ARQUIVO =====

# Carregar o arquivo CSV ignorando cabeçalhos desnecessários
file_path = 'vdg/results_prod.csv' # Get the filename from uploaded
df = pd.read_csv(file_path, comment='#', sep=None, engine='python')

# ===== PASSO 2: RENOMEAR COLUNAS =====
df.rename(columns={
    df.columns[0]: "timestamp",
    df.columns[1]: "participant_id",
    df.columns[3]: "id_frase",
    df.columns[5]: "context",
    df.columns[9]: "response_type",
    df.columns[10]: "response_value",
    df.columns[11]: "reaction_time_ms"
}, inplace=True)

# ===== PASSO 3: FILTRAR CLASSIFICAÇÕES =====
df_frases = df[(df["context"] == "frases") & (df["id_frase"].between(4, 154))]

df_start = df_frases[df_frases["response_value"] == "Start"][["participant_id", "id_frase", "reaction_time_ms"]].rename(columns={"reaction_time_ms": "start_time"})
df_end = df_frases[df_frases["response_value"] == "End"][["participant_id", "id_frase", "reaction_time_ms"]].rename(columns={"reaction_time_ms": "end_time"})
df_classification = df_frases[df_frases["response_value"].isin(["negativa", "neutra", "positiva"])][["participant_id", "id_frase", "response_value"]].rename(columns={"response_value": "classification"})

# ===== PASSO 4: CALCULAR TEMPO DE REAÇÃO =====
df_final = df_start.merge(df_end, on=["participant_id", "id_frase"], how="inner")
df_final = df_final.merge(df_classification, on=["participant_id", "id_frase"], how="inner")
df_final["reaction_time"] = (df_final["end_time"].astype(float) - df_final["start_time"].astype(float)) / 1000

# ===== PASSO 5: ADICIONAR GÊNERO =====
df_genero = df[(df["context"] == "genero") & (df["response_type"] == "Selected")][["participant_id", "response_value"]].rename(columns={"response_value": "gender"})
df_final = df_final.merge(df_genero, on="participant_id", how="left")

# ===== PASSO 6: SELECIONAR PARTICIPANTES =====
df_final["short_id"] = df_final["participant_id"].str[:4]
unique_participants = df_final.groupby("gender")["short_id"].unique()
selected_females = unique_participants.get("Feminino", [])[:3]
selected_males = unique_participants.get("Masculino", [])[:3]
participant_mapping = {selected_females[i]: f"F{i+1}" for i in range(3)}
participant_mapping.update({selected_males[i]: f"M{i+1}" for i in range(3)})
df_final_filtered = df_final[df_final["short_id"].isin(participant_mapping.keys())].copy()
df_final_filtered["participant_label"] = df_final_filtered["short_id"].map(participant_mapping)

# ===== PASSO 7: REESTRUTURAR TABELA FINAL =====
df_pivot = df_final_filtered.pivot(index="id_frase", columns="participant_label", values="classification")
df_pivot.reset_index(inplace=True)
classification_mapping = {"neutra": 0, "negativa": -1, "positiva": 1}

df_pivot.replace(classification_mapping, inplace=True)
# Convert relevant columns to numeric type, handling errors explicitly
for col in df_pivot.columns[1:]:  # Exclude 'id_frase'
    try:
        df_pivot[col] = pd.to_numeric(df_pivot[col])
    except ValueError:
        # Handle the error, e.g., keep the original values or replace with NaN
        pass  # For now, we'll keep the original values

df_pivot["soma"] = df_pivot.iloc[:, 1:].sum(axis=1)
classification_columns = [col for col in df_pivot.columns if col not in ['id_frase', 'soma', 'variacao']]
df_pivot["variacao"] = df_pivot[classification_columns].max(axis=1) - df_pivot[classification_columns].min(axis=1)


# ===== IMPRESSÃO DA TABELA FINAL =====
from IPython.display import display
print("\nTabela Final Processada:")

# Select columns excluding 'id_frase' before styling
columns_to_display = [col for col in df_pivot.columns if col != 'id_frase']
styled_df = df_pivot[columns_to_display].style.set_properties(**{'background-color': '#f0f0f0'}, subset=pd.IndexSlice[df_pivot.index[::2], :])
display(styled_df)

# ===== RESUMO DA TABELA FINAL PARA VALIDAÇÃO =====
df_summary = pd.DataFrame({
    "Identificação": ["M1", "M2", "M3", "F1", "F2", "F3"],
    "Hash": [selected_males[0], selected_males[1], selected_males[2], selected_females[0], selected_females[1], selected_females[2]]
})
print("\nResumo dos Participantes Selecionados:")
display(df_summary)

# ===== PASSO 8: ANÁLISE ESTATÍSTICA =====
male_columns = [col for col in df_pivot.columns if str(col).startswith("M")]
female_columns = [col for col in df_pivot.columns if str(col).startswith("F")]
df_pivot["mean_male"] = df_pivot[male_columns].mean(axis=1)
df_pivot["mean_female"] = df_pivot[female_columns].mean(axis=1)
df_pivot["difference_male_female"] = df_pivot["mean_male"] - df_pivot["mean_female"]

# Teste t para verificar diferença estatística
t_stat, p_value = ttest_ind(df_pivot["mean_male"], df_pivot["mean_female"], equal_var=False)
print(f"Teste T - Diferença entre Homens e Mulheres: p={p_value:.4f}")

male_columns = [col for col in df_pivot.columns if str(col).startswith("M")]
female_columns = [col for col in df_pivot.columns if str(col).startswith("F")]
df_pivot["mean_male"] = df_pivot[male_columns].mean(axis=1)
df_pivot["mean_female"] = df_pivot[female_columns].mean(axis=1)
df_pivot["difference_male_female"] = df_pivot["mean_male"] - df_pivot["mean_female"]

# ===== PASSO 9: GRÁFICOS =====
plt.figure(figsize=(6, 4))
plt.hist(df_pivot["difference_male_female"], bins=10, edgecolor="black", alpha=0.7)
plt.xlabel("Diferença Média (Homens - Mulheres)")
plt.ylabel("Número de Frases")
plt.title("Distribuição da Diferença de Classificação por Gênero")
plt.axvline(0, color='red', linestyle='dashed', linewidth=1)
plt.show()

plt.figure(figsize=(8, 5))
plt.scatter(range(len(df_pivot)), df_pivot["difference_male_female"], alpha=0.6, color='blue')
plt.axhline(0, color='red', linestyle='dashed', linewidth=1)
plt.xlabel("Frase Indexada")
plt.ylabel("Diferença Média (Homens - Mulheres")
plt.title("Diferença nas Classificações entre Homens e Mulheres por Frase")
plt.show()

# ... (previous code) ...

# Add a grouped bar graph comparing the average male and female classifications (-1, 0, 1)
plt.figure(figsize=(8, 6))  # Adjust figure size as needed

classifications = [-1, 0, 1]
classification_labels = ["Negativa", "Neutra", "Positiva"]  # New labels for x-axis
male_means = [df_pivot[male_columns][df_pivot[male_columns] == c].stack().count() / len(male_columns) / len(df_pivot) for c in classifications]
female_means = [df_pivot[female_columns][df_pivot[female_columns] == c].stack().count() / len(female_columns) / len(df_pivot) for c in classifications]

bar_width = 0.35
index = np.arange(len(classifications))

# Create bars with labels and colors
male_bars = plt.bar(index, male_means, bar_width, label="Masculino", color='skyblue')
female_bars = plt.bar(index + bar_width, female_means, bar_width, label="Feminino", color='lightcoral')

plt.xlabel("Classificação")
plt.ylabel("Proporção Média")
plt.title("Comparação da Média da Classificação entre Homens e Mulheres")
plt.xticks(index + bar_width / 2, classification_labels)  # Use new labels for x-axis
plt.legend()

# Format y-axis labels as percentages
plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: '{:.0%}'.format(y)))

# Add value annotations above bars with percentage format and increased precision
for bar in male_bars + female_bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height + 0.01, f'{height:.2%}', ha='center', va='bottom')

plt.tight_layout()
plt.show()

# ===== GERAÇÃO DA TABELA PROCESSADA PARA DOWNLOAD =====
# from IPython.display import FileLink

# Create a CSV file from df_pivot
# df_pivot.to_csv('tabela_processada.csv', index=False)

# Provide a download link
# display(FileLink('tabela_processada.csv'))